// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kubernetes/kube_node.proto

package kubernetes

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ExecutorEventEventType int32

const (
	ExecutorEvent_SAVE_FILE    ExecutorEventEventType = 0
	ExecutorEvent_START_REQ    ExecutorEventEventType = 1
	ExecutorEvent_STOP_REQ     ExecutorEventEventType = 2
	ExecutorEvent_SHUTDOWN_REQ ExecutorEventEventType = 3
	ExecutorEvent_MESSAGE      ExecutorEventEventType = 4
)

var ExecutorEventEventType_name = map[int32]string{
	0: "SAVE_FILE",
	1: "START_REQ",
	2: "STOP_REQ",
	3: "SHUTDOWN_REQ",
	4: "MESSAGE",
}
var ExecutorEventEventType_value = map[string]int32{
	"SAVE_FILE":    0,
	"START_REQ":    1,
	"STOP_REQ":     2,
	"SHUTDOWN_REQ": 3,
	"MESSAGE":      4,
}

func (x ExecutorEventEventType) String() string {
	return proto.EnumName(ExecutorEventEventType_name, int32(x))
}
func (ExecutorEventEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{0, 0}
}

type WrapperEventEventType int32

const (
	WrapperEvent_REGISTERED WrapperEventEventType = 0
	WrapperEvent_MESSAGE    WrapperEventEventType = 1
	WrapperEvent_RESPONSE   WrapperEventEventType = 2
	WrapperEvent_HEARTBEAT  WrapperEventEventType = 3
)

var WrapperEventEventType_name = map[int32]string{
	0: "REGISTERED",
	1: "MESSAGE",
	2: "RESPONSE",
	3: "HEARTBEAT",
}
var WrapperEventEventType_value = map[string]int32{
	"REGISTERED": 0,
	"MESSAGE":    1,
	"RESPONSE":   2,
	"HEARTBEAT":  3,
}

func (x WrapperEventEventType) String() string {
	return proto.EnumName(WrapperEventEventType_name, int32(x))
}
func (WrapperEventEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{1, 0}
}

type WrapperEventResponseStatType int32

const (
	WrapperEventResponse_SAVED    WrapperEventResponseStatType = 0
	WrapperEventResponse_UNSAVED  WrapperEventResponseStatType = 1
	WrapperEventResponse_RUNNING  WrapperEventResponseStatType = 2
	WrapperEventResponse_FINISHED WrapperEventResponseStatType = 3
	WrapperEventResponse_FAILED   WrapperEventResponseStatType = 4
	WrapperEventResponse_KILLED   WrapperEventResponseStatType = 5
)

var WrapperEventResponseStatType_name = map[int32]string{
	0: "SAVED",
	1: "UNSAVED",
	2: "RUNNING",
	3: "FINISHED",
	4: "FAILED",
	5: "KILLED",
}
var WrapperEventResponseStatType_value = map[string]int32{
	"SAVED":    0,
	"UNSAVED":  1,
	"RUNNING":  2,
	"FINISHED": 3,
	"FAILED":   4,
	"KILLED":   5,
}

func (x WrapperEventResponseStatType) String() string {
	return proto.EnumName(WrapperEventResponseStatType_name, int32(x))
}
func (WrapperEventResponseStatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{1, 0, 0}
}

// executor侧事件的格式定义(executor发送,wrapper接收)
type ExecutorEvent struct {
	// 事件类型，有5种
	Type ExecutorEventEventType `protobuf:"varint,1,opt,name=type,proto3,enum=kubernetes.ExecutorEventEventType" json:"type,omitempty"`
	// 要执行的任务号和mesos task id一致
	// 最后一个字符'.'将id分成两部分，前面为task name对应可以理解为process name，后面为随机数标识这次的操作
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 任务对应的进程信息
	Process *ProcessInfo `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
	// 环境需要的数据文件
	Files                map[string]*K8SFile `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Msg                  string              `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ExecutorEvent) Reset()         { *m = ExecutorEvent{} }
func (m *ExecutorEvent) String() string { return proto.CompactTextString(m) }
func (*ExecutorEvent) ProtoMessage()    {}
func (*ExecutorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{0}
}
func (m *ExecutorEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutorEvent.Unmarshal(m, b)
}
func (m *ExecutorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutorEvent.Marshal(b, m, deterministic)
}
func (dst *ExecutorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorEvent.Merge(dst, src)
}
func (m *ExecutorEvent) XXX_Size() int {
	return xxx_messageInfo_ExecutorEvent.Size(m)
}
func (m *ExecutorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorEvent proto.InternalMessageInfo

func (m *ExecutorEvent) GetType() ExecutorEventEventType {
	if m != nil {
		return m.Type
	}
	return ExecutorEvent_SAVE_FILE
}

func (m *ExecutorEvent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ExecutorEvent) GetProcess() *ProcessInfo {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *ExecutorEvent) GetFiles() map[string]*K8SFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *ExecutorEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// wrapper侧事件的格式定义(wrapper发送,executor接收)
type WrapperEvent struct {
	// 事件类型，有4种：REGISTERED, MESSAGE, RESPONSE, HEARTBEAT
	Type WrapperEventEventType `protobuf:"varint,1,opt,name=type,proto3,enum=kubernetes.WrapperEventEventType" json:"type,omitempty"`
	// 已经执行的任务号和mesos task id一致
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 所属的Kube Node名称
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 任务执行的响应，对应event_type=RESPONSE
	Resp *WrapperEventResponse `protobuf:"bytes,4,opt,name=resp,proto3" json:"resp,omitempty"`
	// 消息内容对应event_type=MESSAGE
	Msg string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	// 心跳节奏(下一次心跳来的时间),对应event_type=HEARTBEAT
	Heartbeat            int32    `protobuf:"varint,6,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WrapperEvent) Reset()         { *m = WrapperEvent{} }
func (m *WrapperEvent) String() string { return proto.CompactTextString(m) }
func (*WrapperEvent) ProtoMessage()    {}
func (*WrapperEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{1}
}
func (m *WrapperEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WrapperEvent.Unmarshal(m, b)
}
func (m *WrapperEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WrapperEvent.Marshal(b, m, deterministic)
}
func (dst *WrapperEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrapperEvent.Merge(dst, src)
}
func (m *WrapperEvent) XXX_Size() int {
	return xxx_messageInfo_WrapperEvent.Size(m)
}
func (m *WrapperEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WrapperEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WrapperEvent proto.InternalMessageInfo

func (m *WrapperEvent) GetType() WrapperEventEventType {
	if m != nil {
		return m.Type
	}
	return WrapperEvent_REGISTERED
}

func (m *WrapperEvent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *WrapperEvent) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *WrapperEvent) GetResp() *WrapperEventResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *WrapperEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *WrapperEvent) GetHeartbeat() int32 {
	if m != nil {
		return m.Heartbeat
	}
	return 0
}

type WrapperEventResponse struct {
	// 任务执行状态
	Code WrapperEventResponseStatType `protobuf:"varint,1,opt,name=code,proto3,enum=kubernetes.WrapperEventResponseStatType" json:"code,omitempty"`
	// 错误码
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WrapperEventResponse) Reset()         { *m = WrapperEventResponse{} }
func (m *WrapperEventResponse) String() string { return proto.CompactTextString(m) }
func (*WrapperEventResponse) ProtoMessage()    {}
func (*WrapperEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{1, 0}
}
func (m *WrapperEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WrapperEventResponse.Unmarshal(m, b)
}
func (m *WrapperEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WrapperEventResponse.Marshal(b, m, deterministic)
}
func (dst *WrapperEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrapperEventResponse.Merge(dst, src)
}
func (m *WrapperEventResponse) XXX_Size() int {
	return xxx_messageInfo_WrapperEventResponse.Size(m)
}
func (m *WrapperEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WrapperEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WrapperEventResponse proto.InternalMessageInfo

func (m *WrapperEventResponse) GetCode() WrapperEventResponseStatType {
	if m != nil {
		return m.Code
	}
	return WrapperEventResponse_SAVED
}

func (m *WrapperEventResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// 执行命令的请求体
type ExecInfo struct {
	// 所属的Kube Node名称
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 进程的位置(全路径)
	Cmd string `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// 进程的工作目录
	WorkPath string `protobuf:"bytes,3,opt,name=work_path,json=workPath,proto3" json:"work_path,omitempty"`
	// 进程的参数
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// 进程的环境变量
	Envs                 []string `protobuf:"bytes,5,rep,name=envs,proto3" json:"envs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecInfo) Reset()         { *m = ExecInfo{} }
func (m *ExecInfo) String() string { return proto.CompactTextString(m) }
func (*ExecInfo) ProtoMessage()    {}
func (*ExecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{2}
}
func (m *ExecInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecInfo.Unmarshal(m, b)
}
func (m *ExecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecInfo.Marshal(b, m, deterministic)
}
func (dst *ExecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecInfo.Merge(dst, src)
}
func (m *ExecInfo) XXX_Size() int {
	return xxx_messageInfo_ExecInfo.Size(m)
}
func (m *ExecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExecInfo proto.InternalMessageInfo

func (m *ExecInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ExecInfo) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *ExecInfo) GetWorkPath() string {
	if m != nil {
		return m.WorkPath
	}
	return ""
}

func (m *ExecInfo) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ExecInfo) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

// 执行命令的结果
type ExecResult struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecResult) Reset()         { *m = ExecResult{} }
func (m *ExecResult) String() string { return proto.CompactTextString(m) }
func (*ExecResult) ProtoMessage()    {}
func (*ExecResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_kube_node_075e552aea58ab2e, []int{3}
}
func (m *ExecResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecResult.Unmarshal(m, b)
}
func (m *ExecResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecResult.Marshal(b, m, deterministic)
}
func (dst *ExecResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecResult.Merge(dst, src)
}
func (m *ExecResult) XXX_Size() int {
	return xxx_messageInfo_ExecResult.Size(m)
}
func (m *ExecResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecResult.DiscardUnknown(m)
}

var xxx_messageInfo_ExecResult proto.InternalMessageInfo

func (m *ExecResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ExecResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecutorEvent)(nil), "kubernetes.executor_event")
	proto.RegisterMapType((map[string]*K8SFile)(nil), "kubernetes.executor_event.FilesEntry")
	proto.RegisterType((*WrapperEvent)(nil), "kubernetes.wrapper_event")
	proto.RegisterType((*WrapperEventResponse)(nil), "kubernetes.wrapper_event.response")
	proto.RegisterType((*ExecInfo)(nil), "kubernetes.exec_info")
	proto.RegisterType((*ExecResult)(nil), "kubernetes.exec_result")
	proto.RegisterEnum("kubernetes.ExecutorEventEventType", ExecutorEventEventType_name, ExecutorEventEventType_value)
	proto.RegisterEnum("kubernetes.WrapperEventEventType", WrapperEventEventType_name, WrapperEventEventType_value)
	proto.RegisterEnum("kubernetes.WrapperEventResponseStatType", WrapperEventResponseStatType_name, WrapperEventResponseStatType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WrapperProtoClient is the client API for WrapperProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WrapperProtoClient interface {
	EventCall(ctx context.Context, opts ...grpc.CallOption) (WrapperProto_EventCallClient, error)
	Exec(ctx context.Context, in *ExecInfo, opts ...grpc.CallOption) (*ExecResult, error)
}

type wrapperProtoClient struct {
	cc *grpc.ClientConn
}

func NewWrapperProtoClient(cc *grpc.ClientConn) WrapperProtoClient {
	return &wrapperProtoClient{cc}
}

func (c *wrapperProtoClient) EventCall(ctx context.Context, opts ...grpc.CallOption) (WrapperProto_EventCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WrapperProto_serviceDesc.Streams[0], "/kubernetes.WrapperProto/EventCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &wrapperProtoEventCallClient{stream}
	return x, nil
}

type WrapperProto_EventCallClient interface {
	Send(*WrapperEvent) error
	Recv() (*ExecutorEvent, error)
	grpc.ClientStream
}

type wrapperProtoEventCallClient struct {
	grpc.ClientStream
}

func (x *wrapperProtoEventCallClient) Send(m *WrapperEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wrapperProtoEventCallClient) Recv() (*ExecutorEvent, error) {
	m := new(ExecutorEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wrapperProtoClient) Exec(ctx context.Context, in *ExecInfo, opts ...grpc.CallOption) (*ExecResult, error) {
	out := new(ExecResult)
	err := c.cc.Invoke(ctx, "/kubernetes.WrapperProto/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WrapperProtoServer is the server API for WrapperProto service.
type WrapperProtoServer interface {
	EventCall(WrapperProto_EventCallServer) error
	Exec(context.Context, *ExecInfo) (*ExecResult, error)
}

func RegisterWrapperProtoServer(s *grpc.Server, srv WrapperProtoServer) {
	s.RegisterService(&_WrapperProto_serviceDesc, srv)
}

func _WrapperProto_EventCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WrapperProtoServer).EventCall(&wrapperProtoEventCallServer{stream})
}

type WrapperProto_EventCallServer interface {
	Send(*ExecutorEvent) error
	Recv() (*WrapperEvent, error)
	grpc.ServerStream
}

type wrapperProtoEventCallServer struct {
	grpc.ServerStream
}

func (x *wrapperProtoEventCallServer) Send(m *ExecutorEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wrapperProtoEventCallServer) Recv() (*WrapperEvent, error) {
	m := new(WrapperEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WrapperProto_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperProtoServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.WrapperProto/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperProtoServer).Exec(ctx, req.(*ExecInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _WrapperProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.WrapperProto",
	HandlerType: (*WrapperProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _WrapperProto_Exec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventCall",
			Handler:       _WrapperProto_EventCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kubernetes/kube_node.proto",
}

func init() {
	proto.RegisterFile("kubernetes/kube_node.proto", fileDescriptor_kube_node_075e552aea58ab2e)
}

var fileDescriptor_kube_node_075e552aea58ab2e = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x8e, 0x63, 0x3b, 0xa9, 0x27, 0x6d, 0x65, 0xad, 0x7a, 0x4e, 0x5d, 0x9f, 0x73, 0x11, 0x59,
	0x20, 0x45, 0x08, 0x05, 0x14, 0x24, 0xd4, 0xc2, 0x0d, 0x81, 0x6c, 0x1a, 0x8b, 0xe2, 0x86, 0xb5,
	0xdb, 0x5e, 0x5a, 0x6e, 0xb2, 0xfd, 0x51, 0x52, 0xdb, 0x5a, 0x3b, 0xfd, 0x11, 0x2f, 0x81, 0x78,
	0x1c, 0x9e, 0x88, 0xc7, 0x40, 0xb3, 0x8e, 0x9b, 0x84, 0xaa, 0x20, 0x6e, 0xac, 0xf9, 0x66, 0xbe,
	0x9d, 0x9d, 0x99, 0x6f, 0xbc, 0x60, 0x4f, 0x66, 0xa7, 0x5c, 0xc4, 0x3c, 0xe7, 0xd9, 0x0b, 0x34,
	0xc3, 0x38, 0x19, 0xf3, 0x76, 0x2a, 0x92, 0x3c, 0x21, 0xb0, 0x88, 0xd9, 0x3b, 0xcb, 0xbc, 0xdd,
	0x2c, 0xcc, 0xa3, 0x6c, 0x52, 0xd0, 0x9c, 0xaf, 0x2a, 0x6c, 0xf2, 0x5b, 0x3e, 0x9a, 0xe5, 0x89,
	0x08, 0xf9, 0x35, 0x8f, 0x73, 0xb2, 0x07, 0x5a, 0x7e, 0x97, 0x72, 0x4b, 0x69, 0x2a, 0xad, 0xcd,
	0xce, 0xd3, 0xf6, 0xe2, 0x70, 0x7b, 0x95, 0xd9, 0x96, 0xdf, 0x10, 0xc9, 0x4c, 0x1e, 0x21, 0xdb,
	0x50, 0xc7, 0xdc, 0xe1, 0xe5, 0xd8, 0xaa, 0x36, 0x95, 0x96, 0xc1, 0x6a, 0x08, 0xdd, 0x31, 0xe9,
	0x40, 0x3d, 0x15, 0xc9, 0x88, 0x67, 0x99, 0xa5, 0x36, 0x95, 0x56, 0xa3, 0x63, 0x2d, 0xa7, 0x9d,
	0x87, 0xc2, 0xcb, 0xf8, 0x2c, 0x61, 0x25, 0x91, 0xbc, 0x05, 0xfd, 0xec, 0x72, 0xca, 0x33, 0x4b,
	0x6b, 0xaa, 0xad, 0xc6, 0x6f, 0x0b, 0xe9, 0x23, 0x8f, 0xc6, 0xb9, 0xb8, 0x63, 0xc5, 0x19, 0x62,
	0x82, 0x7a, 0x95, 0x9d, 0x5b, 0xba, 0xac, 0x02, 0x4d, 0xdb, 0x03, 0x58, 0xd0, 0x30, 0x3e, 0xe1,
	0x77, 0xb2, 0x47, 0x83, 0xa1, 0x49, 0x9e, 0x81, 0x7e, 0x1d, 0x4d, 0x67, 0x5c, 0x56, 0xde, 0xe8,
	0x6c, 0x2d, 0x5f, 0x87, 0x43, 0xc3, 0xbc, 0xac, 0xa0, 0xbc, 0xa9, 0xee, 0x2a, 0xce, 0x09, 0xc0,
	0xa2, 0x7f, 0xb2, 0x01, 0x86, 0xdf, 0x3d, 0xa6, 0x61, 0xdf, 0x3d, 0xa0, 0x66, 0x45, 0xc2, 0xa0,
	0xcb, 0x82, 0x90, 0xd1, 0xcf, 0xa6, 0x42, 0xd6, 0x61, 0xcd, 0x0f, 0x0e, 0x87, 0x12, 0x55, 0x89,
	0x09, 0xeb, 0xfe, 0xe0, 0x28, 0xe8, 0x1d, 0x9e, 0x78, 0xd2, 0xa3, 0x92, 0x06, 0xd4, 0x3f, 0x51,
	0xdf, 0xef, 0xee, 0x53, 0x53, 0x73, 0x7e, 0xa8, 0xb0, 0x71, 0x23, 0xa2, 0x34, 0xe5, 0xa5, 0x22,
	0xbb, 0x2b, 0x8a, 0x3c, 0x59, 0xae, 0x6c, 0x85, 0xf8, 0x17, 0x82, 0x6c, 0x43, 0x1d, 0x97, 0x05,
	0x03, 0x6a, 0x11, 0x40, 0xe8, 0x8e, 0xc9, 0x6b, 0xd0, 0x04, 0xcf, 0x52, 0x4b, 0x93, 0x53, 0x70,
	0x1e, 0xbf, 0x0b, 0x59, 0x49, 0x9c, 0x71, 0x26, 0xf9, 0x0f, 0x07, 0x4e, 0xfe, 0x07, 0xe3, 0x82,
	0x47, 0x22, 0x3f, 0xe5, 0x51, 0x6e, 0xd5, 0x9a, 0x4a, 0x4b, 0x67, 0x0b, 0x87, 0xfd, 0x5d, 0x81,
	0xb5, 0x32, 0x05, 0x79, 0x07, 0xda, 0x28, 0x19, 0x97, 0x0d, 0x3e, 0xff, 0xf3, 0xa5, 0xed, 0x2c,
	0x8f, 0xca, 0x46, 0xf1, 0x24, 0xd9, 0x02, 0x9d, 0x0b, 0x91, 0x88, 0x79, 0x9b, 0x05, 0x70, 0x8e,
	0xc1, 0xb8, 0x27, 0x12, 0x03, 0x74, 0x94, 0xa8, 0x67, 0x56, 0x70, 0xde, 0x47, 0x5e, 0x01, 0x14,
	0x04, 0xec, 0xc8, 0xf3, 0x5c, 0x6f, 0xdf, 0xac, 0xa2, 0x52, 0x7d, 0xd7, 0x73, 0xfd, 0x01, 0xed,
	0x99, 0x2a, 0x01, 0xa8, 0xf5, 0xbb, 0xee, 0x01, 0xed, 0x99, 0x1a, 0xda, 0x1f, 0xdd, 0x03, 0xb4,
	0x75, 0xa7, 0xbf, 0xa2, 0xfd, 0x26, 0x00, 0xa3, 0xfb, 0xae, 0x1f, 0x50, 0x56, 0x66, 0x2f, 0xd5,
	0x94, 0xd2, 0x33, 0xea, 0x0f, 0x0f, 0x3d, 0x9f, 0x9a, 0x55, 0xdc, 0x8b, 0x01, 0xed, 0xb2, 0xe0,
	0x3d, 0xed, 0x06, 0xa6, 0xea, 0x7c, 0x01, 0x03, 0x37, 0x59, 0x2e, 0xfe, 0xb2, 0x24, 0xca, 0x8a,
	0x24, 0x26, 0xa8, 0xa3, 0xab, 0x52, 0x40, 0x34, 0xc9, 0x7f, 0x60, 0xdc, 0x24, 0x62, 0x12, 0xa6,
	0x51, 0x7e, 0x31, 0xd7, 0x6f, 0x0d, 0x1d, 0xc3, 0x28, 0xbf, 0x20, 0x04, 0xb4, 0x48, 0x9c, 0x17,
	0xbf, 0x8d, 0xc1, 0xa4, 0x8d, 0x3e, 0x1e, 0x5f, 0x67, 0x96, 0x5e, 0xf8, 0xd0, 0x76, 0xf6, 0xa0,
	0x21, 0x2f, 0x17, 0x3c, 0x9b, 0x4d, 0x73, 0xa4, 0xdc, 0x6b, 0xa0, 0xcf, 0xa7, 0xfa, 0x2f, 0xd4,
	0x8a, 0x68, 0xb9, 0x3d, 0x05, 0xea, 0x7c, 0x53, 0x60, 0xfd, 0xa4, 0x10, 0x66, 0x28, 0x5f, 0x9b,
	0x01, 0x18, 0x14, 0x07, 0xf2, 0x21, 0x9a, 0x4e, 0xc9, 0xce, 0xa3, 0xfa, 0xd9, 0xf6, 0xe3, 0x3f,
	0xb1, 0x53, 0x69, 0x29, 0x2f, 0x15, 0xdc, 0x75, 0x7a, 0xcb, 0x47, 0xe4, 0x9f, 0x5f, 0x99, 0x72,
	0x48, 0xf6, 0xf6, 0x03, 0x77, 0x51, 0x92, 0x53, 0x39, 0xad, 0xc9, 0x17, 0xed, 0xd5, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0x78, 0xf1, 0x27, 0x16, 0x05, 0x00, 0x00,
}
