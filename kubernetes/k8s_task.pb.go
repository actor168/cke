// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kubernetes/k8s_task.proto

package kubernetes

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type K8STaskType int32

const (
	K8STaskType_START_NODE    K8STaskType = 0
	K8STaskType_START_PROCESS K8STaskType = 1
)

var K8STaskType_name = map[int32]string{
	0: "START_NODE",
	1: "START_PROCESS",
}
var K8STaskType_value = map[string]int32{
	"START_NODE":    0,
	"START_PROCESS": 1,
}

func (x K8STaskType) String() string {
	return proto.EnumName(K8STaskType_name, int32(x))
}
func (K8STaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_k8s_task_e5ee9a2a6cc0c245, []int{0}
}

// 数据文件
type K8SFile struct {
	// 文件的路径
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// 文件的读写属性
	Mode int32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// 文件的数据
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8SFile) Reset()         { *m = K8SFile{} }
func (m *K8SFile) String() string { return proto.CompactTextString(m) }
func (*K8SFile) ProtoMessage()    {}
func (*K8SFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_k8s_task_e5ee9a2a6cc0c245, []int{0}
}
func (m *K8SFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SFile.Unmarshal(m, b)
}
func (m *K8SFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SFile.Marshal(b, m, deterministic)
}
func (dst *K8SFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SFile.Merge(dst, src)
}
func (m *K8SFile) XXX_Size() int {
	return xxx_messageInfo_K8SFile.Size(m)
}
func (m *K8SFile) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SFile.DiscardUnknown(m)
}

var xxx_messageInfo_K8SFile proto.InternalMessageInfo

func (m *K8SFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *K8SFile) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *K8SFile) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// kubernetes task进程启动所需的信息和数据
type ProcessInfo struct {
	// 进程的位置(全路径)
	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// 进程的工作目录
	WorkPath string `protobuf:"bytes,2,opt,name=work_path,json=workPath,proto3" json:"work_path,omitempty"`
	// 进程的参数
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// 进程的环境变量
	Envs []string `protobuf:"bytes,4,rep,name=envs,proto3" json:"envs,omitempty"`
	// 进程依赖的数据文件
	Files                map[string]*K8SFile `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_k8s_task_e5ee9a2a6cc0c245, []int{1}
}
func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessInfo.Unmarshal(m, b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
}
func (dst *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(dst, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return xxx_messageInfo_ProcessInfo.Size(m)
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

func (m *ProcessInfo) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *ProcessInfo) GetWorkPath() string {
	if m != nil {
		return m.WorkPath
	}
	return ""
}

func (m *ProcessInfo) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProcessInfo) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *ProcessInfo) GetFiles() map[string]*K8SFile {
	if m != nil {
		return m.Files
	}
	return nil
}

// kuberbetes 使用的dns信息
type K8SDnsRecord struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8SDnsRecord) Reset()         { *m = K8SDnsRecord{} }
func (m *K8SDnsRecord) String() string { return proto.CompactTextString(m) }
func (*K8SDnsRecord) ProtoMessage()    {}
func (*K8SDnsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_k8s_task_e5ee9a2a6cc0c245, []int{2}
}
func (m *K8SDnsRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SDnsRecord.Unmarshal(m, b)
}
func (m *K8SDnsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SDnsRecord.Marshal(b, m, deterministic)
}
func (dst *K8SDnsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SDnsRecord.Merge(dst, src)
}
func (m *K8SDnsRecord) XXX_Size() int {
	return xxx_messageInfo_K8SDnsRecord.Size(m)
}
func (m *K8SDnsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SDnsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_K8SDnsRecord proto.InternalMessageInfo

func (m *K8SDnsRecord) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *K8SDnsRecord) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// kuberbetes node的信息
type K8SNodeInfo struct {
	// 该节点kubernetes组件使用的网络
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// 该Kube Node使用的IP
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// 该k8s集群各节点的 dns信息
	DnsRecord []*K8SDnsRecord `protobuf:"bytes,3,rep,name=dns_record,json=dnsRecord,proto3" json:"dns_record,omitempty"`
	// node环境需要的数据文件
	Files map[string]*K8SFile `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 发布服务的边界节点,对外提供服务的端口(如: 80/tcp)
	PublishPorts         []string `protobuf:"bytes,5,rep,name=publish_ports,json=publishPorts,proto3" json:"publish_ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8SNodeInfo) Reset()         { *m = K8SNodeInfo{} }
func (m *K8SNodeInfo) String() string { return proto.CompactTextString(m) }
func (*K8SNodeInfo) ProtoMessage()    {}
func (*K8SNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_k8s_task_e5ee9a2a6cc0c245, []int{3}
}
func (m *K8SNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SNodeInfo.Unmarshal(m, b)
}
func (m *K8SNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SNodeInfo.Marshal(b, m, deterministic)
}
func (dst *K8SNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SNodeInfo.Merge(dst, src)
}
func (m *K8SNodeInfo) XXX_Size() int {
	return xxx_messageInfo_K8SNodeInfo.Size(m)
}
func (m *K8SNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_K8SNodeInfo proto.InternalMessageInfo

func (m *K8SNodeInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *K8SNodeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *K8SNodeInfo) GetDnsRecord() []*K8SDnsRecord {
	if m != nil {
		return m.DnsRecord
	}
	return nil
}

func (m *K8SNodeInfo) GetFiles() map[string]*K8SFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *K8SNodeInfo) GetPublishPorts() []string {
	if m != nil {
		return m.PublishPorts
	}
	return nil
}

// scheduler和executor传递的kub node的任务
type K8STask struct {
	// 所属的Kube Node名称
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 任务使用的镜像名称
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// 该任务的类型
	TaskType K8STaskType `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=kubernetes.K8STaskType" json:"task_type,omitempty"`
	// k8s节点信息
	Node *K8SNodeInfo `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	// 进程信息
	Process              *ProcessInfo `protobuf:"bytes,5,opt,name=process,proto3" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *K8STask) Reset()         { *m = K8STask{} }
func (m *K8STask) String() string { return proto.CompactTextString(m) }
func (*K8STask) ProtoMessage()    {}
func (*K8STask) Descriptor() ([]byte, []int) {
	return fileDescriptor_k8s_task_e5ee9a2a6cc0c245, []int{4}
}
func (m *K8STask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8STask.Unmarshal(m, b)
}
func (m *K8STask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8STask.Marshal(b, m, deterministic)
}
func (dst *K8STask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8STask.Merge(dst, src)
}
func (m *K8STask) XXX_Size() int {
	return xxx_messageInfo_K8STask.Size(m)
}
func (m *K8STask) XXX_DiscardUnknown() {
	xxx_messageInfo_K8STask.DiscardUnknown(m)
}

var xxx_messageInfo_K8STask proto.InternalMessageInfo

func (m *K8STask) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *K8STask) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *K8STask) GetTaskType() K8STaskType {
	if m != nil {
		return m.TaskType
	}
	return K8STaskType_START_NODE
}

func (m *K8STask) GetNode() *K8SNodeInfo {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *K8STask) GetProcess() *ProcessInfo {
	if m != nil {
		return m.Process
	}
	return nil
}

func init() {
	proto.RegisterType((*K8SFile)(nil), "kubernetes.k8s_file")
	proto.RegisterType((*ProcessInfo)(nil), "kubernetes.process_info")
	proto.RegisterMapType((map[string]*K8SFile)(nil), "kubernetes.process_info.FilesEntry")
	proto.RegisterType((*K8SDnsRecord)(nil), "kubernetes.k8s_dns_record")
	proto.RegisterType((*K8SNodeInfo)(nil), "kubernetes.k8s_node_info")
	proto.RegisterMapType((map[string]*K8SFile)(nil), "kubernetes.k8s_node_info.FilesEntry")
	proto.RegisterType((*K8STask)(nil), "kubernetes.k8s_task")
	proto.RegisterEnum("kubernetes.K8STaskType", K8STaskType_name, K8STaskType_value)
}

func init() { proto.RegisterFile("kubernetes/k8s_task.proto", fileDescriptor_k8s_task_e5ee9a2a6cc0c245) }

var fileDescriptor_k8s_task_e5ee9a2a6cc0c245 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xfd, 0xf4, 0x17, 0x5b, 0xd7, 0x3f, 0xf8, 0x1b, 0x02, 0x1d, 0xa7, 0x1b, 0xe1, 0x74, 0x61,
	0x02, 0x75, 0x41, 0x2d, 0x25, 0xc9, 0xae, 0xb4, 0x0e, 0x74, 0x93, 0x98, 0xb1, 0xf7, 0x42, 0xb6,
	0x26, 0xb1, 0x90, 0xad, 0x11, 0x9a, 0x71, 0x8a, 0x1e, 0xa8, 0x6f, 0xd4, 0x07, 0xe9, 0x23, 0x94,
	0x3b, 0x23, 0x59, 0xc1, 0x25, 0xbb, 0xee, 0xce, 0x3d, 0x73, 0xcf, 0xdc, 0x33, 0x47, 0x57, 0x30,
	0xce, 0x0e, 0x6b, 0x5e, 0xe6, 0x5c, 0x71, 0xf9, 0x21, 0xbb, 0x96, 0x91, 0x8a, 0x65, 0x36, 0x2b,
	0x4a, 0xa1, 0x04, 0x81, 0xf6, 0x68, 0x72, 0x07, 0x5d, 0x3c, 0x7d, 0x4c, 0x77, 0x9c, 0x10, 0x70,
	0x8b, 0x58, 0x6d, 0xa9, 0x15, 0x58, 0x53, 0x9f, 0x69, 0x8c, 0xdc, 0x5e, 0x24, 0x9c, 0xda, 0x81,
	0x35, 0xf5, 0x98, 0xc6, 0xc8, 0x25, 0xb1, 0x8a, 0xa9, 0x13, 0x58, 0xd3, 0x3e, 0xd3, 0x78, 0xf2,
	0xdb, 0x82, 0x7e, 0x51, 0x8a, 0x0d, 0x97, 0x32, 0x4a, 0xf3, 0x47, 0x41, 0x46, 0xe0, 0x6c, 0xf6,
	0x49, 0x7d, 0x17, 0x42, 0xf2, 0x16, 0xfc, 0x1f, 0xa2, 0xcc, 0x22, 0x3d, 0xc3, 0xd6, 0x7c, 0x17,
	0x89, 0x45, 0x3d, 0x27, 0x2e, 0x9f, 0x24, 0x75, 0x02, 0x07, 0x67, 0x23, 0x46, 0x8e, 0xe7, 0xcf,
	0x92, 0xba, 0x86, 0x43, 0x4c, 0x6e, 0xc0, 0x43, 0xaf, 0x92, 0x7a, 0x81, 0x33, 0xed, 0x85, 0x97,
	0xb3, 0xf6, 0x2d, 0xb3, 0x97, 0xf3, 0x67, 0x77, 0xd8, 0x35, 0xcf, 0x55, 0x59, 0x31, 0xa3, 0xb8,
	0xb8, 0x07, 0x68, 0x49, 0xf4, 0x97, 0xf1, 0xaa, 0xf1, 0x97, 0xf1, 0x8a, 0x5c, 0x81, 0xf7, 0x1c,
	0xef, 0x0e, 0xe6, 0xad, 0xbd, 0xf0, 0xfc, 0xe5, 0xd5, 0x4d, 0x46, 0xcc, 0xb4, 0xdc, 0xda, 0xd7,
	0xd6, 0xe4, 0x13, 0x0c, 0x91, 0x4e, 0x72, 0x19, 0x95, 0x7c, 0x23, 0xca, 0x04, 0x0d, 0x6f, 0x85,
	0x54, 0x4d, 0x80, 0x88, 0xc9, 0x10, 0xec, 0xb4, 0xa8, 0x9f, 0x6b, 0xa7, 0xc5, 0xe4, 0xa7, 0x0d,
	0x03, 0x94, 0xe5, 0x22, 0xe1, 0x26, 0x29, 0x0a, 0x9d, 0x9c, 0x2b, 0x4c, 0xa2, 0x16, 0x36, 0xe5,
	0xa9, 0x96, 0xdc, 0x00, 0xb4, 0xd3, 0x74, 0x54, 0xbd, 0xf0, 0xe2, 0xd4, 0x66, 0xdb, 0xc1, 0xfc,
	0x24, 0x97, 0xcc, 0x58, 0xbb, 0x6d, 0x72, 0x73, 0xb5, 0xea, 0xdd, 0xa9, 0xea, 0x68, 0xe7, 0xef,
	0xe0, 0xc8, 0x25, 0x0c, 0x8a, 0xc3, 0x7a, 0x97, 0xca, 0x6d, 0x54, 0x88, 0x52, 0x99, 0xec, 0x7d,
	0xd6, 0xaf, 0xc9, 0x05, 0x72, 0xff, 0x3c, 0xdd, 0x5f, 0x96, 0xd9, 0x4c, 0xdc, 0x5b, 0xf2, 0x06,
	0x3a, 0xc6, 0x60, 0xb3, 0x50, 0x67, 0x58, 0x7e, 0x4f, 0xc8, 0x39, 0x78, 0xe9, 0x3e, 0x7e, 0xe2,
	0x75, 0x48, 0xa6, 0x20, 0x9f, 0xc1, 0x47, 0x59, 0xa4, 0xaa, 0x82, 0xeb, 0x2d, 0x1d, 0x86, 0xe3,
	0xd3, 0x79, 0xc7, 0x06, 0xd6, 0x45, 0xb8, 0xaa, 0x0a, 0x4e, 0xde, 0x83, 0x8b, 0xf7, 0x52, 0x57,
	0x5b, 0x1c, 0xbf, 0x9a, 0x11, 0xd3, 0x6d, 0x24, 0x84, 0x4e, 0xbd, 0x72, 0xd4, 0xd3, 0x0a, 0xfa,
	0xda, 0x36, 0xb2, 0xa6, 0xf1, 0x2a, 0x34, 0x5f, 0xff, 0x38, 0x9d, 0x0c, 0x01, 0x96, 0xab, 0x2f,
	0x6c, 0x15, 0xdd, 0x3f, 0x7c, 0x9b, 0x8f, 0xfe, 0x23, 0xff, 0xc3, 0xc0, 0xd4, 0x0b, 0xf6, 0xf0,
	0x75, 0xbe, 0x5c, 0x8e, 0xac, 0xf5, 0x99, 0xfe, 0x6d, 0x3f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xd8, 0x5d, 0x4a, 0x04, 0xd3, 0x03, 0x00, 0x00,
}
